generator client {
  provider = "prisma-client-js"
}

// Dedicated reasons for mute system
model MuteReason {
  id        Int      @id @default(autoincrement())
  guildId   String
  label     String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  // How to apply mute
  punishmentType        PunishmentType @default(Timeout) // Timeout or Mute (role)
  punishmentDurationMin Int?
  muteRoleId            String?

  guild Guild @relation(fields: [guildId], references: [id])

  @@index([guildId])
  @@unique([guildId, label])
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.sqlite"
}

// Base entities
model Guild {
  id         String       @id @map("guild_id")
  createdAt  DateTime     @default(now())
  members    Member[]
  logs       CommandLog[]
  levelConfig LevelConfig?
  economyBalances EconomyBalance[]
  economyConfig   EconomyConfig?
  // Moderation relations
  warns      Warn[]
  warnConfig WarnConfig?
  warnReasons WarnReason[]
  muteReasons MuteReason[]
  globalMuteRoleId String?
  // Feature toggles
  muteEnabled Boolean @default(true)
}

model User {
  id        String    @id @map("user_id")
  createdAt DateTime  @default(now())
  members   Member[]
  logs      CommandLog[]
  economyBalances EconomyBalance[]
}

model Member {
  id        Int      @id @default(autoincrement())
  guildId   String
  userId    String
  xp        Int      @default(0)
  level     Int      @default(0)
  // Activity tracking
  msgCount     Int      @default(0)
  voiceSeconds Int      @default(0)
  updatedAt DateTime @updatedAt

  guild Guild @relation(fields: [guildId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([guildId, userId])
}

model CommandLog {
  id        Int      @id @default(autoincrement())
  guildId   String?
  userId    String?
  command   String
  createdAt DateTime @default(now())

  guild Guild? @relation(fields: [guildId], references: [id])
  user  User?  @relation(fields: [userId], references: [id])
}

// Inferred from previous migrations in SQLite (role_stacking, voice_cooldown)
model LevelConfig {
  guildId       String  @id
  roleStacking  Boolean @default(true) @map("role_stacking")
  voiceCooldown Int     @default(60)   @map("voice_cooldown")

  guild Guild @relation(fields: [guildId], references: [id])
}

// Economy models
model EconomyBalance {
  id        Int      @id @default(autoincrement())
  guildId   String
  userId    String
  cur1      Int      @default(0) // Earnable currency
  cur2      Int      @default(0) // Premium currency via exchange
  updatedAt DateTime @updatedAt
  // Economy timestamps
  lastDailyAt        DateTime?
  lastWeeklyAt       DateTime?
  lastMsgEarnAt      DateTime?
  lastVoiceJoinedAt  DateTime?

  guild Guild @relation(fields: [guildId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([guildId, userId])
}

model EconomyConfig {
  guildId   String  @id
  basePrice Int     @default(100)  // price of 1 unit of currency2 in currency1 when supply is 0
  slope     Float   @default(0.001) // how fast price grows with total cur1 supply

  guild Guild @relation(fields: [guildId], references: [id])
}

// Moderation models
model Warn {
  id           Int      @id @default(autoincrement())
  guildId      String
  userId       String
  moderatorId  String
  reason       String
  createdAt    DateTime @default(now())
  expiresAt    DateTime?

  guild Guild @relation(fields: [guildId], references: [id])

  @@index([guildId, userId])
}

model WarnConfig {
  guildId            String  @id
  logChannelId       String?
  muteThreshold      Int     @default(3)
  kickThreshold      Int     @default(5)
  banThreshold       Int     @default(7)
  muteDurationMin    Int     @default(60) // minutes
  expiryDays         Int?                // auto-expire warns after N days; null = never
  enabled            Boolean @default(true)

  guild Guild @relation(fields: [guildId], references: [id])
}

model WarnReason {
  id        Int      @id @default(autoincrement())
  guildId   String
  label     String   // text shown in UI
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  // Punishment config per reason
  punishmentType        PunishmentType @default(None)
  punishmentDurationMin Int?
  muteRoleId            String?

  guild Guild @relation(fields: [guildId], references: [id])

  @@index([guildId])
  @@unique([guildId, label])
}

/// Enum for reason-specific punishment
enum PunishmentType {
  None
  Timeout
  Mute
  Ban
}
