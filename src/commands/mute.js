const { SlashCommandBuilder, PermissionFlagsBits, MessageFlags, EmbedBuilder } = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('mute')
    .setDescription('–í—ã–¥–∞—Ç—å –º—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫—É –ø–æ –ø—Ä–∏—á–∏–Ω–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –º—É—Ç–æ–≤')
    .addUserOption(o => o.setName('user').setDescription('–ö–æ–≥–æ –∑–∞–º—å—é—Ç–∏—Ç—å').setRequired(true))
    .addStringOption(o => o.setName('reason').setDescription('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã (–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–æ–≤)').setRequired(true).setMaxLength(100)),
  guildOnly: true,
  cooldown: 3,
  perms: [PermissionFlagsBits.ModerateMembers],

  async execute(interaction, client) {
    const guild = interaction.guild;
    const moderator = interaction.member;
    const targetUser = interaction.options.getUser('user', true);
    const reasonLabel = interaction.options.getString('reason', true);

    if (!guild) return interaction.reply({ content: '–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.', flags: MessageFlags.Ephemeral });
    if (targetUser.bot) return interaction.reply({ content: '–ù–µ–ª—å–∑—è –º—å—é—Ç–∏—Ç—å –±–æ—Ç–æ–≤.', flags: MessageFlags.Ephemeral });
    if (targetUser.id === moderator.id) return interaction.reply({ content: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—å—é—Ç–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.', flags: MessageFlags.Ephemeral });

    const member = await guild.members.fetch(targetUser.id).catch(() => null);
    if (!member) return interaction.reply({ content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.', flags: MessageFlags.Ephemeral });

    const guildId = guild.id;
    // Check if mute system enabled for this guild
    const guildRow0 = await client.prisma.guild.findUnique({ where: { id: guildId } }).catch(() => null);
    if (guildRow0?.muteEnabled === false) {
      return interaction.reply({ content: '–°–∏—Å—Ç–µ–º–∞ –º—É—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞.', flags: MessageFlags.Ephemeral });
    }

    // –ù–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –º—É—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    const reason = await client.prisma.muteReason.findFirst({ where: { guildId, label: reasonLabel } });
    if (!reason || !reason.active) {
      return interaction.reply({ content: '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã.', flags: MessageFlags.Ephemeral });
    }

    const cfg = await client.prisma.warnConfig.findUnique({ where: { guildId } }).catch(() => null);
    const guildRow = await client.prisma.guild.findUnique({ where: { id: guildId } }).catch(() => null);
    const durationMin = reason.punishmentDurationMin ?? cfg?.muteDurationMin ?? 60;

    let applied = false;
    let actionText = '';
    try {
      if (reason.punishmentType === 'Mute') {
        const roleId = guildRow?.muteRoleId;
        if (!roleId) {
          return interaction.reply({ content: '–ú—É—Ç-—Ä–æ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ –µ—ë —á–µ—Ä–µ–∑ /warnconfig setmuterole.', flags: MessageFlags.Ephemeral });
        }
        const role = guild.roles.cache.get(roleId) || await guild.roles.fetch(roleId).catch(() => null);
        if (!role) return interaction.reply({ content: '–£–∫–∞–∑–∞–Ω–Ω–∞—è –º—É—Ç-—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', flags: MessageFlags.Ephemeral });
        const me = guild.members.me;
        if (!me) return interaction.reply({ content: '–ë–æ—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ –≥–∏–ª—å–¥–∏–∏.', flags: MessageFlags.Ephemeral });
        if (role.position >= me.roles.highest.position) {
          return interaction.reply({ content: '–ù–µ –º–æ–≥—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å –º—É—Ç–∞: —Ä–æ–ª—å –≤—ã—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ —Ä–æ–ª–∏ –±–æ—Ç–∞.', flags: MessageFlags.Ephemeral });
        }
        await member.roles.add(role, `–ú—É—Ç –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason.label}`);
        applied = true;
        actionText = `–†–æ–ª–µ–≤–æ–π –º—É—Ç (—Ä–æ–ª—å <@&${role.id}>) –Ω–∞ ${durationMin} –º–∏–Ω.`;
        setTimeout(async () => {
          const fresh = await guild.members.fetch(targetUser.id).catch(() => null);
          if (!fresh) return;
          if (fresh.roles.cache.has(role.id)) {
            fresh.roles.remove(role, '–û–∫–æ–Ω—á–∞–Ω–∏–µ –º—É—Ç–∞').catch(() => null);
          }
        }, durationMin * 60 * 1000);
      } else {
        const ms = durationMin * 60 * 1000;
        await member.timeout(ms, `–ú—É—Ç –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason.label}`);
        applied = true;
        actionText = `Timeout –Ω–∞ ${durationMin} –º–∏–Ω.`;
      }
    } catch (e) {
      client.logs?.warn && client.logs.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º—É—Ç: ${e.message}`);
    }

    // –õ–æ–≥–∏
    const logChannelId = cfg?.logChannelId;
    if (applied && logChannelId) {
      const embed = new EmbedBuilder()
        .setColor(0x2F3136)
        .setTitle('–ü—Ä–∏–º–µ–Ω—ë–Ω –º—É—Ç')
        .setDescription(`üîá <@${targetUser.id}> –∑–∞–º—å—é—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º <@${moderator.id}>`)
        .addFields(
          { name: '–ü—Ä–∏—á–∏–Ω–∞', value: reason.label, inline: false },
          { name: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', value: `${durationMin} –º–∏–Ω.`, inline: true },
          { name: '–¢–∏–ø', value: reason.punishmentType === 'Mute' ? 'Role Mute' : 'Timeout', inline: true },
        )
        .setTimestamp();
      const ch = guild.channels.cache.get(logChannelId) || await guild.channels.fetch(logChannelId).catch(() => null);
      if (ch && ch.isTextBased()) ch.send({ embeds: [embed] }).catch(() => null);
    }

    return interaction.reply({ content: applied ? `‚úÖ –ü—Ä–∏–º–µ–Ω—ë–Ω –º—É—Ç: ${actionText}` : '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º—É—Ç.', flags: MessageFlags.Ephemeral });
  }
};
