const { 
  MessageFlags, 
  ButtonStyle, 
  ButtonBuilder,
  ActionRowBuilder,
  StringSelectMenuBuilder,
  StringSelectMenuOptionBuilder,
  ContainerBuilder,
  SectionBuilder,
  TextDisplayBuilder
} = require('discord.js');

module.exports = {
  customId: 'settings:warn-edit-punishment',
  
  async execute(interaction, args, client) {
    const reasonId = args[0];
    
    if (!reasonId) {
      return interaction.reply({
        content: '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø—Ä–∞–≤–∏–ª–∞.',
        flags: MessageFlags.Ephemeral
      });
    }

    const guildId = interaction.guildId;
    
    // Get current warn reason from database
    const warnReason = await client.prisma.warnReason.findUnique({
      where: { 
        id: parseInt(reasonId),
        guildId: guildId 
      }
    }).catch(() => null);

    if (!warnReason) {
      return interaction.reply({
        content: '‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.',
        flags: MessageFlags.Ephemeral
      });
    }

    // Build punishment type selection interface
    const punishmentContainer = new ContainerBuilder()
      .addActionRowComponents(
        new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setStyle(ButtonStyle.Secondary)
              .setLabel("‚Üê –ù–∞–∑–∞–¥")
              .setCustomId(`settings:warn-edit-rule-${reasonId}`)
          )
      )
      .addSectionComponents(
        new SectionBuilder()
          .setButtonAccessory(
            new ButtonBuilder()
              .setStyle(ButtonStyle.Primary)
              .setLabel("üõ°Ô∏è")
              .setCustomId('settings:punishment-type-info')
              .setDisabled(true)
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder().setContent(
              `> ### –¢–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è –¥–ª—è "${warnReason.label}"
` +
              `> –¢–µ–∫—É—â–∏–π —Ç–∏–ø: **${warnReason.punishmentType || 'None'}**
` +
              `> 
` +
              `> –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è:`
            )
          )
      )
      .addActionRowComponents(
        new ActionRowBuilder()
          .addComponents(
            new StringSelectMenuBuilder()
              .setCustomId(`settings:punishment-type-select-${reasonId}`)
              .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è')
              .addOptions(
                new StringSelectMenuOptionBuilder()
                  .setLabel('üîì None - –ë–µ–∑ –Ω–∞–∫–∞–∑–∞–Ω–∏—è')
                  .setValue('None')
                  .setDescription('–¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π')
                  .setDefault(warnReason.punishmentType === 'None' || !warnReason.punishmentType),
                new StringSelectMenuOptionBuilder()
                  .setLabel('‚è∞ Timeout - –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞')
                  .setValue('Timeout')
                  .setDescription('–í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π')
                  .setDefault(warnReason.punishmentType === 'Timeout'),
                new StringSelectMenuOptionBuilder()
                  .setLabel('üîá Mute - –†–æ–ª—å –º—É—Ç–∞')
                  .setValue('Mute')
                  .setDescription('–í—ã–¥–∞—Ç—å —Ä–æ–ª—å –º—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
                  .setDefault(warnReason.punishmentType === 'Mute')
              )
          )
      );

    // Update the interaction with punishment type selection
    await interaction.update({
      components: [punishmentContainer],
      flags: MessageFlags.IsComponentsV2
    });
  }
};