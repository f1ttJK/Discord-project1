const { 
  MessageFlags, 
  ButtonStyle, 
  ButtonBuilder,
  ActionRowBuilder,
  ContainerBuilder,
  SectionBuilder,
  TextDisplayBuilder
} = require('discord.js');

module.exports = {
  customId: 'settings:warn-edit-duration',
  
  async execute(interaction, args, client) {
    const reasonId = args[0];
    
    if (!reasonId) {
      return interaction.reply({
        content: '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø—Ä–∞–≤–∏–ª–∞.',
        flags: MessageFlags.Ephemeral
      });
    }

    const guildId = interaction.guildId;
    
    // Get current warn reason from database
    const warnReason = await client.prisma.warnReason.findUnique({
      where: { 
        id: parseInt(reasonId),
        guildId: guildId 
      }
    }).catch(() => null);

    if (!warnReason) {
      return interaction.reply({
        content: '‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.',
        flags: MessageFlags.Ephemeral
      });
    }

    const currentDuration = warnReason.punishmentDurationMin || 0;
    const durationText = currentDuration > 0 ? `${currentDuration} –º–∏–Ω` : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';

    // Build duration edit interface
    const durationContainer = new ContainerBuilder()
      .addActionRowComponents(
        new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setStyle(ButtonStyle.Secondary)
              .setLabel("‚Üê –ù–∞–∑–∞–¥")
              .setCustomId(`settings:warn-edit-rule-${reasonId}`)
          )
      )
      .addSectionComponents(
        new SectionBuilder()
          .setButtonAccessory(
            new ButtonBuilder()
              .setStyle(ButtonStyle.Primary)
              .setLabel("‚è∞")
              .setCustomId('settings:duration-info')
              .setDisabled(true)
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder().setContent(
              `> ### –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏—è –¥–ª—è "${warnReason.label}"
` +
              `> –¢–µ–∫—É—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: **${durationText}**
` +
              `> –¢–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è: **${warnReason.punishmentType || 'None'}**
` +
              `> 
` +
              `> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:`
            )
          )
      )
      .addActionRowComponents(
        new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setStyle(ButtonStyle.Secondary)
              .setLabel('‚ûñ 5 –º–∏–Ω')
              .setCustomId(`settings:duration-adjust-${reasonId}-dec-5`)
              .setDisabled(currentDuration <= 5),
            new ButtonBuilder()
              .setStyle(ButtonStyle.Secondary)
              .setLabel('‚ûï 5 –º–∏–Ω')
              .setCustomId(`settings:duration-adjust-${reasonId}-inc-5`),
            new ButtonBuilder()
              .setStyle(ButtonStyle.Secondary)
              .setLabel('‚ûñ 15 –º–∏–Ω')
              .setCustomId(`settings:duration-adjust-${reasonId}-dec-15`)
              .setDisabled(currentDuration <= 15),
            new ButtonBuilder()
              .setStyle(ButtonStyle.Secondary)
              .setLabel('‚ûï 15 –º–∏–Ω')
              .setCustomId(`settings:duration-adjust-${reasonId}-inc-15`)
          )
      )
      .addActionRowComponents(
        new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setStyle(ButtonStyle.Secondary)
              .setLabel('‚ûñ 1 —á–∞—Å')
              .setCustomId(`settings:duration-adjust-${reasonId}-dec-60`)
              .setDisabled(currentDuration <= 60),
            new ButtonBuilder()
              .setStyle(ButtonStyle.Secondary)
              .setLabel('‚ûï 1 —á–∞—Å')
              .setCustomId(`settings:duration-adjust-${reasonId}-inc-60`),
            new ButtonBuilder()
              .setStyle(ButtonStyle.Danger)
              .setLabel('üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å')
              .setCustomId(`settings:duration-reset-${reasonId}`)
              .setDisabled(currentDuration === 0)
          )
      );

    // Update the interaction with duration edit interface
    await interaction.update({
      components: [durationContainer],
      flags: MessageFlags.IsComponentsV2
    });
  }
};