import React, { useEffect, useState } from 'react'
import { useParams, useNavigate, Link } from 'react-router-dom'
import { api } from '../lib/api'
import {
  Box,
  Container,
  Heading,
  Text,
  VStack,
  HStack,
  Button,
  Card,
  CardHeader,
  CardBody,
  Switch,
  FormControl,
  FormLabel,
  Spinner,
  Alert,
  AlertIcon,
  useColorModeValue,
  Flex,
  Spacer,
  Badge,
  Icon,
  useToast
} from '@chakra-ui/react'
import { FiSettings, FiArrowLeft, FiTrendingUp } from 'react-icons/fi'

export default function Guild() {
  const { id } = useParams()
  const navigate = useNavigate()
  const toast = useToast()
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [cfg, setCfg] = useState(null)
  const [saving, setSaving] = useState(false)
  
  const bgColor = useColorModeValue('gray.50', 'dark.500')
  const cardBg = useColorModeValue('white', 'dark.400')
  
  useEffect(() => {
    let mounted = true
    ;(async () => {
      try {
        setLoading(true)
        const data = await api.getGuildConfig(id)
        if (!mounted) return
        setCfg(data?.config || data || { guildId: id })
      } catch (e) {
        setError(e.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞')
      } finally {
        if (mounted) setLoading(false)
      }
    })()
    return () => { mounted = false }
  }, [id])

  async function save() {
    try {
      setSaving(true)
      await api.updateGuildConfig(id, cfg)
      toast({
        title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
        status: 'success',
        duration: 3000,
        isClosable: true,
      })
    } catch (e) {
      toast({
        title: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
        description: e.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        status: 'error',
        duration: 5000,
        isClosable: true,
      })
    } finally {
      setSaving(false)
    }
  }

  const handleLevelingToggle = async (enabled) => {
    const newCfg = { ...cfg, levelingEnabled: enabled }
    setCfg(newCfg)
    try {
      setSaving(true)
      await api.updateGuildConfig(id, newCfg)
      toast({
        title: enabled ? '–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –≤–∫–ª—é—á–µ–Ω–∞' : '–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞',
        status: 'success',
        duration: 3000,
        isClosable: true,
      })
    } catch (e) {
      setCfg(cfg) // Revert on error
      toast({
        title: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
        description: e.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        status: 'error',
        duration: 5000,
        isClosable: true,
      })
    } finally {
      setSaving(false)
    }
  }

  if (loading) {
    return (
      <Box minH="100vh" bg={bgColor}>
        <Container maxW="4xl" py={8}>
          <Flex justify="center" align="center" minH="50vh">
            <VStack spacing={4}>
              <Spinner size="xl" color="discord.500" thickness="4px" />
              <Text color="gray.400">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞...</Text>
            </VStack>
          </Flex>
        </Container>
      </Box>
    )
  }

  if (error) {
    return (
      <Box minH="100vh" bg={bgColor}>
        <Container maxW="4xl" py={8}>
          <VStack spacing={6}>
            <Alert status="error" borderRadius="md">
              <AlertIcon />
              {error}
            </Alert>
            <Button leftIcon={<FiArrowLeft />} onClick={() => navigate(-1)}>
              –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º
            </Button>
          </VStack>
        </Container>
      </Box>
    )
  }

  return (
    <Box minH="100vh" bg={bgColor}>
      <Container maxW="6xl" py={8}>
        {/* Header */}
        <Flex align="center" justify="space-between" mb={8}>
          <VStack align="start" spacing={1}>
            <Heading size="lg" color="white">
              üõ†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
            </Heading>
            <Text color="gray.400">
              ID: {cfg?.guildId || id}
            </Text>
          </VStack>
          <HStack spacing={3}>
            <Button
              as={Link}
              to={`/guilds/${id}/settings`}
              variant="discord"
              leftIcon={<FiSettings />}
              size="lg"
            >
              –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </Button>
            <Button
              leftIcon={<FiArrowLeft />}
              onClick={() => navigate('/dashboard')}
              variant="ghost"
            >
              –ö —Å–µ—Ä–≤–µ—Ä–∞–º
            </Button>
          </HStack>
        </Flex>

        {/* Quick Settings */}
        <VStack spacing={6} align="stretch">
          <Card bg={cardBg} borderRadius="xl" shadow="md">
            <CardHeader>
              <HStack spacing={3}>
                <Icon as={FiTrendingUp} color="discord.500" boxSize={6} />
                <VStack align="start" spacing={1}>
                  <Heading size="md" color="white">–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π</Heading>
                  <Text color="gray.400" fontSize="sm">
                    –ü–æ–∑–≤–æ–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø–æ–ª—É—á–∞—Ç—å –æ–ø—ã—Ç –∏ –ø–æ–≤—ã—à–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å
                  </Text>
                </VStack>
                <Spacer />
                <Badge
                  colorScheme={cfg?.levelingEnabled ? 'green' : 'gray'}
                  variant="subtle"
                  px={3}
                  py={1}
                >
                  {cfg?.levelingEnabled ? '–í–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
                </Badge>
              </HStack>
            </CardHeader>
            <CardBody pt={0}>
              <FormControl display="flex" alignItems="center">
                <FormLabel mb="0" color="white" flex={1}>
                  –í–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                </FormLabel>
                <Switch
                  colorScheme="discord"
                  size="lg"
                  isChecked={Boolean(cfg?.levelingEnabled)}
                  onChange={(e) => handleLevelingToggle(e.target.checked)}
                  isDisabled={saving}
                />
              </FormControl>
              
              {cfg?.levelingEnabled && (
                <Box mt={4} p={4} bg="discord.50" borderRadius="md" border="1px" borderColor="discord.200">
                  <Text fontSize="sm" color="discord.700">
                    üí° <strong>–°–æ–≤–µ—Ç:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–≤–æ–π –æ–ø—ã—Ç–∞, 
                    –Ω–∞–≥—Ä–∞–¥ –∑–∞ —É—Ä–æ–≤–Ω–∏ –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π.
                  </Text>
                </Box>
              )}
            </CardBody>
          </Card>

          {/* Additional Quick Settings can be added here */}
          <Card bg={cardBg} borderRadius="xl" shadow="md" opacity={0.7}>
            <CardBody textAlign="center" py={8}>
              <Icon as={FiSettings} boxSize={8} color="gray.400" mb={3} />
              <Text color="gray.400" fontSize="lg" mb={2}>
                –ë–æ–ª—å—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è
              </Text>
              <Text color="gray.500" fontSize="sm">
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –±–æ—Ç–æ–º
              </Text>
            </CardBody>
          </Card>
        </VStack>
      </Container>
    </Box>
  )
}
