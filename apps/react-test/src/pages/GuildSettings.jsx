import React, { useState, useEffect } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import {
  Box,
  VStack,
  HStack,
  Heading,
  Text,
  Switch,
  FormControl,
  FormLabel,
  Select,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  NumberIncrementStepper,
  NumberDecrementStepper,
  Textarea,
  Button,
  useToast,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Card,
  CardHeader,
  CardBody,
  Spinner,
  Alert,
  AlertIcon,
  Divider,
  Badge,
  Input
} from '@chakra-ui/react'
import { api } from '../lib/api'

export default function GuildSettings() {
  const { id: guildId } = useParams()
  const navigate = useNavigate()
  const toast = useToast()
  
  const [config, setConfig] = useState(null)
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [error, setError] = useState(null)

  useEffect(() => {
    loadConfig()
  }, [guildId])

  const loadConfig = async () => {
    if (!guildId || guildId === 'undefined') {
      setError('Invalid guild ID')
      setLoading(false)
      navigate('/dashboard')
      return
    }
    
    try {
      setLoading(true)
      const data = await api.getGuildConfig(guildId)
      setConfig(data.config || {})
      setError(null)
    } catch (err) {
      setError(err.message)
      if (err.status === 403 || err.status === 404) {
        navigate('/dashboard')
      }
    } finally {
      setLoading(false)
    }
  }

  const saveConfig = async (updates) => {
    try {
      setSaving(true)
      const updatedConfig = { ...config, ...updates }
      await api.updateGuildConfig(guildId, updatedConfig)
      setConfig(updatedConfig)
      
      toast({
        title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
        status: 'success',
        duration: 3000,
        isClosable: true,
      })
    } catch (err) {
      toast({
        title: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
        description: err.message,
        status: 'error',
        duration: 5000,
        isClosable: true,
      })
    } finally {
      setSaving(false)
    }
  }

  const handleToggle = (field) => (value) => {
    const updates = { [field]: value }
    setConfig(prev => ({ ...prev, ...updates }))
    saveConfig(updates)
  }

  const handleChange = (field) => (value) => {
    const updates = { [field]: value }
    setConfig(prev => ({ ...prev, ...updates }))
    saveConfig(updates)
  }

  if (loading) {
    return (
      <Box p={8} textAlign="center">
        <Spinner size="xl" />
        <Text mt={4}>–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</Text>
      </Box>
    )
  }

  if (error) {
    return (
      <Box p={8}>
        <Alert status="error">
          <AlertIcon />
          {error}
        </Alert>
        <Button mt={4} onClick={() => navigate('/dashboard')}>
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º
        </Button>
      </Box>
    )
  }

  return (
    <Box p={8} maxW="1200px" mx="auto">
      <HStack justify="space-between" mb={8}>
        <VStack align="start" spacing={1}>
          <Heading size="lg">üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞</Heading>
          <Text color="gray.600">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ Discord –±–æ—Ç–∞</Text>
        </VStack>
        <Button onClick={() => navigate('/dashboard')} variant="outline">
          ‚Üê –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º
        </Button>
      </HStack>

      <Tabs variant="enclosed" colorScheme="blue">
        <TabList>
          <Tab>üìà –£—Ä–æ–≤–Ω–∏</Tab>
          <Tab>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</Tab>
          <Tab>üîá –ú—É—Ç</Tab>
          <Tab>üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞</Tab>
          <Tab>‚öôÔ∏è –û–±—â–∏–µ</Tab>
        </TabList>

        <TabPanels>
          {/* Leveling Tab */}
          <TabPanel>
            <VStack spacing={6} align="stretch">
              <Card>
                <CardHeader>
                  <Heading size="md">üéØ –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π</Heading>
                </CardHeader>
                <CardBody>
                  <VStack spacing={4} align="stretch">
                    <FormControl display="flex" alignItems="center">
                      <FormLabel mb="0">
                        –í–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —É—Ä–æ–≤–Ω–µ–π
                        <Badge ml={2} colorScheme={config.levelingEnabled ? 'green' : 'red'}>
                          {config.levelingEnabled ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ'}
                        </Badge>
                      </FormLabel>
                      <Switch
                        isChecked={config.levelingEnabled || false}
                        onChange={(e) => handleToggle('levelingEnabled')(e.target.checked)}
                        isDisabled={saving}
                      />
                    </FormControl>

                    <FormControl>
                      <FormLabel>–ö—Ä–∏–≤–∞—è –æ–ø—ã—Ç–∞</FormLabel>
                      <Select
                        value={config.curve || 'linear'}
                        onChange={(e) => handleChange('curve')(e.target.value)}
                        isDisabled={saving}
                      >
                        <option value="linear">–õ–∏–Ω–µ–π–Ω–∞—è</option>
                        <option value="exponential">–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è</option>
                        <option value="logarithmic">–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è</option>
                      </Select>
                    </FormControl>
                  </VStack>
                </CardBody>
              </Card>
            </VStack>
          </TabPanel>

          {/* Warnings Tab */}
          <TabPanel>
            <VStack spacing={6} align="stretch">
              <Card>
                <CardHeader>
                  <Heading size="md">‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</Heading>
                </CardHeader>
                <CardBody>
                  <VStack spacing={4} align="stretch">
                    <FormControl display="flex" alignItems="center">
                      <FormLabel mb="0">
                        –í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                        <Badge ml={2} colorScheme={config.warnsEnabled ? 'green' : 'red'}>
                          {config.warnsEnabled ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ'}
                        </Badge>
                      </FormLabel>
                      <Switch
                        isChecked={config.warnsEnabled !== false}
                        onChange={(e) => handleToggle('warnsEnabled')(e.target.checked)}
                        isDisabled={saving}
                      />
                    </FormControl>

                    <FormControl>
                      <FormLabel>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</FormLabel>
                      <NumberInput
                        value={config.maxWarns || 3}
                        min={1}
                        max={10}
                        onChange={(value) => handleChange('maxWarns')(parseInt(value))}
                        isDisabled={saving}
                      >
                        <NumberInputField />
                        <NumberInputStepper>
                          <NumberIncrementStepper />
                          <NumberDecrementStepper />
                        </NumberInputStepper>
                      </NumberInput>
                    </FormControl>

                    <FormControl>
                      <FormLabel>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (–¥–Ω–∏, 0 = –Ω–∞–≤—Å–µ–≥–¥–∞)</FormLabel>
                      <NumberInput
                        value={Math.floor((config.warnExpiry || 0) / 86400)}
                        min={0}
                        max={365}
                        onChange={(value) => handleChange('warnExpiry')(parseInt(value) * 86400)}
                        isDisabled={saving}
                      >
                        <NumberInputField />
                        <NumberInputStepper>
                          <NumberIncrementStepper />
                          <NumberDecrementStepper />
                        </NumberInputStepper>
                      </NumberInput>
                    </FormControl>
                  </VStack>
                </CardBody>
              </Card>
            </VStack>
          </TabPanel>

          {/* Mute Tab */}
          <TabPanel>
            <VStack spacing={6} align="stretch">
              <Card>
                <CardHeader>
                  <Heading size="md">üîá –°–∏—Å—Ç–µ–º–∞ –º—É—Ç–æ–≤</Heading>
                </CardHeader>
                <CardBody>
                  <VStack spacing={4} align="stretch">
                    <FormControl display="flex" alignItems="center">
                      <FormLabel mb="0">
                        –í–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –º—É—Ç–æ–≤
                        <Badge ml={2} colorScheme={config.muteEnabled !== false ? 'green' : 'red'}>
                          {config.muteEnabled !== false ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ'}
                        </Badge>
                      </FormLabel>
                      <Switch
                        isChecked={config.muteEnabled !== false}
                        onChange={(e) => handleToggle('muteEnabled')(e.target.checked)}
                        isDisabled={saving}
                      />
                    </FormControl>

                    <FormControl>
                      <FormLabel>ID —Ä–æ–ª–∏ –¥–ª—è –º—É—Ç–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è)</FormLabel>
                      <Input
                        value={config.muteRole || ''}
                        onChange={(e) => handleChange('muteRole')(e.target.value)}
                        placeholder="123456789012345678"
                        isDisabled={saving}
                      />
                    </FormControl>

                    <FormControl>
                      <FormLabel>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ (—á–∞—Å—ã, 0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)</FormLabel>
                      <NumberInput
                        value={Math.floor((config.maxMuteDuration || 86400) / 3600)}
                        min={0}
                        max={8760}
                        onChange={(value) => handleChange('maxMuteDuration')(parseInt(value) * 3600)}
                        isDisabled={saving}
                      >
                        <NumberInputField />
                        <NumberInputStepper>
                          <NumberIncrementStepper />
                          <NumberDecrementStepper />
                        </NumberInputStepper>
                      </NumberInput>
                    </FormControl>
                  </VStack>
                </CardBody>
              </Card>
            </VStack>
          </TabPanel>

          {/* Economy Tab */}
          <TabPanel>
            <VStack spacing={6} align="stretch">
              <Card>
                <CardHeader>
                  <Heading size="md">üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞</Heading>
                </CardHeader>
                <CardBody>
                  <VStack spacing={4} align="stretch">
                    <FormControl display="flex" alignItems="center">
                      <FormLabel mb="0">
                        –í–∫–ª—é—á–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏–∫—É
                        <Badge ml={2} colorScheme={config.economyEnabled ? 'green' : 'red'}>
                          {config.economyEnabled ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ'}
                        </Badge>
                      </FormLabel>
                      <Switch
                        isChecked={config.economyEnabled || false}
                        onChange={(e) => handleToggle('economyEnabled')(e.target.checked)}
                        isDisabled={saving}
                      />
                    </FormControl>

                    <FormControl>
                      <FormLabel>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞</FormLabel>
                      <NumberInput
                        value={config.dailyReward || 100}
                        min={0}
                        max={10000}
                        onChange={(value) => handleChange('dailyReward')(parseInt(value))}
                        isDisabled={saving}
                      >
                        <NumberInputField />
                        <NumberInputStepper>
                          <NumberIncrementStepper />
                          <NumberDecrementStepper />
                        </NumberInputStepper>
                      </NumberInput>
                    </FormControl>

                    <HStack spacing={4}>
                      <FormControl>
                        <FormLabel>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–∞–±–æ—Ç—É</FormLabel>
                        <NumberInput
                          value={config.workReward?.min || 50}
                          min={0}
                          max={1000}
                          onChange={(value) => handleChange('workReward')({ 
                            ...config.workReward, 
                            min: parseInt(value) 
                          })}
                          isDisabled={saving}
                        >
                          <NumberInputField />
                          <NumberInputStepper>
                            <NumberIncrementStepper />
                            <NumberDecrementStepper />
                          </NumberInputStepper>
                        </NumberInput>
                      </FormControl>

                      <FormControl>
                        <FormLabel>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–∞–±–æ—Ç—É</FormLabel>
                        <NumberInput
                          value={config.workReward?.max || 200}
                          min={0}
                          max={1000}
                          onChange={(value) => handleChange('workReward')({ 
                            ...config.workReward, 
                            max: parseInt(value) 
                          })}
                          isDisabled={saving}
                        >
                          <NumberInputField />
                          <NumberInputStepper>
                            <NumberIncrementStepper />
                            <NumberDecrementStepper />
                          </NumberInputStepper>
                        </NumberInput>
                      </FormControl>
                    </HStack>
                  </VStack>
                </CardBody>
              </Card>
            </VStack>
          </TabPanel>

          {/* General Tab */}
          <TabPanel>
            <VStack spacing={6} align="stretch">
              <Card>
                <CardHeader>
                  <Heading size="md">üåê –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</Heading>
                </CardHeader>
                <CardBody>
                  <VStack spacing={4} align="stretch">
                    <FormControl>
                      <FormLabel>–Ø–∑—ã–∫</FormLabel>
                      <Select
                        value={config.locale || 'ru'}
                        onChange={(e) => handleChange('locale')(e.target.value)}
                        isDisabled={saving}
                      >
                        <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                        <option value="en">English</option>
                        <option value="uk">–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞</option>
                      </Select>
                    </FormControl>

                    <FormControl>
                      <FormLabel>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</FormLabel>
                      <Select
                        value={config.timezone || 'Europe/Moscow'}
                        onChange={(e) => handleChange('timezone')(e.target.value)}
                        isDisabled={saving}
                      >
                        <option value="Europe/Moscow">–ú–æ—Å–∫–≤–∞ (UTC+3)</option>
                        <option value="Europe/Kiev">–ö–∏–µ–≤ (UTC+2)</option>
                        <option value="Europe/London">–õ–æ–Ω–¥–æ–Ω (UTC+0)</option>
                        <option value="America/New_York">–ù—å—é-–ô–æ—Ä–∫ (UTC-5)</option>
                      </Select>
                    </FormControl>

                    <FormControl>
                      <FormLabel>ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤</FormLabel>
                      <Input
                        value={config.logChannel || ''}
                        onChange={(e) => handleChange('logChannel')(e.target.value)}
                        placeholder="123456789012345678"
                        isDisabled={saving}
                      />
                    </FormControl>
                  </VStack>
                </CardBody>
              </Card>

              <Card>
                <CardHeader>
                  <Heading size="md">üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</Heading>
                </CardHeader>
                <CardBody>
                  <VStack spacing={4} align="stretch">
                    <FormControl display="flex" alignItems="center">
                      <FormLabel mb="0">
                        –í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                        <Badge ml={2} colorScheme={config.welcomeEnabled ? 'green' : 'red'}>
                          {config.welcomeEnabled ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ'}
                        </Badge>
                      </FormLabel>
                      <Switch
                        isChecked={config.welcomeEnabled || false}
                        onChange={(e) => handleToggle('welcomeEnabled')(e.target.checked)}
                        isDisabled={saving}
                      />
                    </FormControl>

                    <FormControl>
                      <FormLabel>ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π</FormLabel>
                      <Input
                        value={config.welcomeChannel || ''}
                        onChange={(e) => handleChange('welcomeChannel')(e.target.value)}
                        placeholder="123456789012345678"
                        isDisabled={saving}
                      />
                    </FormControl>

                    <FormControl>
                      <FormLabel>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è</FormLabel>
                      <Textarea
                        value={config.welcomeMessage || ''}
                        onChange={(e) => handleChange('welcomeMessage')(e.target.value)}
                        placeholder="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä, {user}!"
                        maxLength={2000}
                        isDisabled={saving}
                      />
                      <Text fontSize="sm" color="gray.500" mt={1}>
                        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {'{user}'} –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                      </Text>
                    </FormControl>
                  </VStack>
                </CardBody>
              </Card>
            </VStack>
          </TabPanel>
        </TabPanels>
      </Tabs>

      {saving && (
        <Box position="fixed" top={4} right={4} zIndex={1000}>
          <Alert status="info" borderRadius="md">
            <Spinner size="sm" mr={2} />
            –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
          </Alert>
        </Box>
      )}
    </Box>
  )
}
